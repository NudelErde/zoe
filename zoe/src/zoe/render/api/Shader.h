/*
 * Shader.h
 *
 *  Created on: 20.04.2019
 *      Author: florian
 */

#pragma once

#include "../../zpch.h"

#include "../../core/Core.h"
#include "../../math/mat.h"
#include "../../core/File.h"
#include "Texture.h"
#include "ImplPointer.h"
#include <map>

namespace Zoe {

class GraphicsContext;

/**
 * This class should not be used directly.
 * It is used to provide a level of abstraction for Shader.
 */
class ShaderImpl {
public:
    /**
     * Creates a VertexArrayImpl with the specified context and generates an ID.
     * @param context the specified context
     */
    ShaderImpl(GraphicsContext* context) : context(context), id(GraphicsContext::generateID()) {}

    /**
     * Destructs this object.
     */
    virtual ~ShaderImpl() = default;

    /**
     * Sets the uniform with the specified name to `v0`.
     * See implementation for details.
     * @param name uniform name
     * @param v0 value
     */
    virtual void setUniform1f(const std::string& name, float v0) = 0;

    /**
     * Sets the uniform with the specified name to `vec2(x, y)`.
     * See implementation for details.
     * @param name uniform name
     * @param v0 x
     * @param v1 y
     */
    virtual void setUniform2f(const std::string& name, float v0, float v1) = 0;

    /**
     * Sets the uniform with the specified name to `vec3(x, y, z)`.
     * See implementation for details.
     * @param name uniform name
     * @param v0 x
     * @param v1 y
     * @param v2 z
     */
    virtual void setUniform3f(const std::string& name, float v0, float v1, float v2) = 0;

    /**
     * Sets the uniform with the specified name to `vec4(x, y, z, w)`.
     * See implementation for details.
     * @param name uniform name
     * @param v0 x
     * @param v1 y
     * @param v2 z
     * @param v3 w
     */
    virtual void setUniform4f(const std::string& name, float v0, float v1, float v2, float v3) = 0;

    /**
     * Sets the uniform with the specified name to the 2x2 matrix.
     * See implementation for details.
     * @param name uniform name
     * @param mat value
     */
    virtual void setUniform2m(const std::string& name, const mat2x2& mat) = 0;

    /**
     * Sets the uniform with the specified name to the 3x3 matrix.
     * See implementation for details.
     * @param name uniform name
     * @param mat value
     */
    virtual void setUniform3m(const std::string& name, const mat3x3& mat) = 0;

    /**
     * Sets the uniform with the specified name to the 4x4 matrix.
     * See implementation for details.
     * @param name uniform name
     * @param mat value
     */
    virtual void setUniform4m(const std::string& name, const mat4x4& mat) = 0;

    /**
     * Sets the uniform with the specified name to the texture.
     * See implementation for details.
     * @param name uniform name
     * @param texture value
     */
    virtual void setTexture(const std::string& name, Texture& texture) = 0;

    /**
     * Binds this Shader. See implementation for details.
     */
    virtual void bind() = 0;

    /**
     * Unbinds this Shader. See implementation for details.
     */
    virtual void unbind() = 0;

    /**
     * Get map with tags.
     * Tags are key value pairs generated by the `#tag [key] [value]` preprocessor directive.
     * See implementation for details.
     * @returns map with key value pairs
     */
    virtual const std::map<std::string, std::string>& getTags() = 0;

    /**
     * Returns the ID of this object. The ID is unique.
     * @return the ID
     */
    inline const int& getID() const { return id; }

protected:
    /**
     * The used graphics context.
     */
    GraphicsContext* context;

    /**
     * A unique id.
     */
    int id;
};

/**
 * A Shader is a program used in the rendering process that is executed on the GPU.
 */
class DLL_PUBLIC Shader {
public:
    /**
     * Creates a Shader with the specified implementation.
     * @param impl the specified implementation
     */
    Shader(ShaderImpl* impl) : impl(impl) {}

    /**
     * Sets the uniform with the specified name to `v0`.
     * @param name uniform name
     * @param v0 value
     */
    inline void setUniform1f(const std::string& name, float v0) { impl->setUniform1f(name, v0); }
    /**
     * Sets the uniform with the specified name to `vec2(x, y)`.
     * @param name uniform name
     * @param v0 x
     * @param v1 y
     */
    inline void setUniform2f(const std::string& name, float v0, float v1) { impl->setUniform2f(name, v0, v1); }

    /**
     * Sets the uniform with the specified name to `vec3(x, y, z)`.
     * @param name uniform name
     * @param v0 x
     * @param v1 y
     * @param v2 z
     */
    inline void setUniform3f(const std::string& name, float v0, float v1, float v2) {
        impl->setUniform3f(name, v0, v1, v2);
    }
    /**
     * Sets the uniform with the specified name to `vec4(x, y, z, w)`.
     * @param name uniform name
     * @param v0 x
     * @param v1 y
     * @param v2 z
     * @param v3 w
     */
    inline void setUniform4f(const std::string& name, float v0, float v1, float v2, float v3) {
        impl->setUniform4f(name, v0, v1, v2, v3);
    }

    /**
     * Sets the uniform with the specified name to the 2x2 matrix.
     * @param name uniform name
     * @param mat value
     */
    inline void setUniform2m(const std::string& name, const mat2x2& mat) { impl->setUniform2m(name, mat); }

    /**
     * Sets the uniform with the specified name to the 3x3 matrix.
     * @param name uniform name
     * @param mat value
     */
    inline void setUniform3m(const std::string& name, const mat3x3& mat) { impl->setUniform3m(name, mat); }

    /**
     * Sets the uniform with the specified name to the 4x4 matrix.
     * @param name uniform name
     * @param mat value
     */
    inline void setUniform4m(const std::string& name, const mat4x4& mat) { impl->setUniform4m(name, mat); }

    /**
     * Sets the uniform with the specified name to the texture.
     * See implementation for details.
     * @param name uniform name
     * @param texture value
     */
    inline void setTexture(const std::string& name, Texture& texture) { impl->setTexture(name, texture); }

    /**
     * Binds this Shader.
     */
    inline void bind() { impl->bind(); }

    /**
     * Unbinds this Shader.
     */
    inline void unbind() { impl->unbind(); }

    /**
     * Get map with tags.
     * Tags are key value pairs generated by the `#tag [key] [value]` preprocessor directive.
     * @returns map with key value pairs
     */
    inline const std::map<std::string, std::string>& getTags() { return impl->getTags(); }

    /**
     * Returns the underlying implementation.
     * @return the implementation
     */
    inline ShaderImpl* getImpl() { return &impl; }

    /**
    * Returns the ID of this object. The ID is unique for the implementation.
    * @return the ID
    */
    inline const int& getID() const { return impl->getID(); }

private:
    ImplPointer<ShaderImpl> impl;
};

}
