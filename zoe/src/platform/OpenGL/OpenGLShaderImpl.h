/*
 * OpenGLShaderImpl.h
 *
 *  Created on: 20.04.2019
 *      Author: florian
 */

#pragma once

#include "../../zoe/core/File.h"
#include "../../zoe/math/mat.h"
#include "../../zoe/render/api/Shader.h"
#include <string>
#include <map>
#include <set>

namespace Zoe {

class GraphicsContext;

/**
 * Implementation of ShaderImpl\n
 * OpenGl should be used if no better implementation is available
 */
class OpenGLShaderImpl : public ShaderImpl {
public:
    /**
     * Creates shader program by parsing the .glsl file.\n
     * The glsl file must contain vertex and fragment shader.\n
     * The preprocessor directive `#shader` is used to classify whether the following code is used for the vertex shader or fragment shader.\n
     * \code
     * #shader [ vertex | fragment ]
     * \endcode
     * @param filepath the .glsl file
     * @param context the GraphicsContext. Must be OpenGLContext
     */
    OpenGLShaderImpl(const File &filepath, const std::set<std::string>& options, GraphicsContext *context);

    /**
     * Releases all used OpenGL resources for this object.
     */
    ~OpenGLShaderImpl() override;

    /**
     * Sets the uniform with the specified name to `v0`
     * @param name uniform name
     * @param v0 value
     * @see http://docs.gl/gl3/glUniform
     */
    void setUniform1f(const std::string &name, float v0) override;

    /**
     * Sets the uniform with the specified name to `vec2(x, y)`
     * @param name uniform name
     * @param v0 x
     * @param v1 y
     * @see http://docs.gl/gl3/glUniform
     */
    void setUniform2f(const std::string &name, float v0, float v1) override;

    /**
     * Sets the uniform with the specified name to `vec3(x, y, z)`
     * @param name uniform name
     * @param v0 x
     * @param v1 y
     * @param v2 z
     * @see http://docs.gl/gl3/glUniform
     */
    void setUniform3f(const std::string &name, float v0, float v1, float v2) override;

    /**
     * Sets the uniform with the specified name to `vec4(x, y, z, w)`
     * @param name uniform name
     * @param v0 x
     * @param v1 y
     * @param v2 z
     * @param v3 w
     * @see http://docs.gl/gl3/glUniform
     */
    void setUniform4f(const std::string &name, float v0, float v1, float v2, float v3) override;

    /**
     * Sets the uniform with the specified name to the 2x2 matrix
     * @param name uniform name
     * @param mat value
     * @see http://docs.gl/gl3/glUniform
     */
    void setUniform2m(const std::string &name, const mat2x2 &mat) override;

    /**
     * Sets the uniform with the specified name to the 3x3 matrix
     * @param name uniform name
     * @param mat value
     * @see http://docs.gl/gl3/glUniform
     */
    void setUniform3m(const std::string &name, const mat3x3 &mat) override;

    /**
     * Sets the uniform with the specified name to the 4x4 matrix
     * @param name uniform name
     * @param mat value
     * @see http://docs.gl/gl3/glUniform
     */
    void setUniform4m(const std::string &name, const mat4x4 &mat) override;

    /**
     * Sets the uniform with the specified name to the texture
     * @param name uniform name
     * @param texture value
     * @see http://docs.gl/gl3/glUniform
     */
    void setTexture(const std::string &name, Texture &texture) override;

    /**
     * Binds the shader if not already bound.
     */
    void bind() override;

    /**
     * Unbinds the shader.
     */
    void unbind() override;

    /**
     * Get map with tags
     * tags are key value pairs generated by the `#tag [key] [value]` preprocessor directive
     * @returns map with key value pairs
     */
    const std::map<std::string, std::string> &getTags() override;

private:

    /**
     * find uniform location for a given name
     * @returns uniform location
     */
    [[nodiscard]] int getUniformLocation(const std::string&) const;

private:
    unsigned int renderID;
    std::map<std::string, unsigned int> samplerSlot;
    std::map<std::string, std::string> tags;
    mutable std::set<std::string> undefinedUniformsLogged;
};

}
